name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:  # For manual trigger

env:
  IMAGE_NAME: your-dockerhub-username/your-image-name

jobs:

  # --- PR Checks ---
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run unit tests
        run: pytest tests/unit/

      - name: Run integration tests
        run: pytest tests/integration/

  # --- Vulnerability Scanning ---
  scan:
    name: Scan Dependencies & Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Dependency vulnerability scan with Safety
        run: |
          pip install safety
          safety check -r requirements.txt

      - name: Build Docker image
        run: docker build -t $IMAGE_NAME:latest .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: table
          exit-code: 1

  # --- Build & Push Docker Image ---
  build-push:
    name: Build & Push Docker Image
    needs: [test, scan]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME:${{ github.sha }} .

      - name: Push Docker Image
        run: docker push $IMAGE_NAME:${{ github.sha }}

  # --- Deploy to Staging ---
  deploy-staging:
    name: Deploy to Staging
    needs: build-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Use SSH/CLI/API to deploy to staging environment here

  # --- Manual Approval + Production Deployment ---
  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://your-production-url.com
    steps:
      - name: Wait for manual approval
        uses: hmarr/auto-approve-action@v3
        if: github.event_name == 'workflow_dispatch'

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # SSH/CLI/API deployment code
